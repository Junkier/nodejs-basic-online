openapi: 3.0.1
info:
  title: 回家試身手3 - RESTfulAPI 設計
  description: |
    本試題為「Node.js 後端網站架設實作坊」第三次回家練習題
    
    試題詳細說明請參考 <a href="
    https://reurl.cc/emeoeK" target='_blank'>https://reurl.cc/emeoeK</a>
    
    請依照下方的 API 說明, 在 nodejs_express 上設計此 5 組 API

  version: "1.0.0"
  
servers:
  - url: "http://localhost:8088"
tags:
  - name: members
    description: 會員資料

paths:
# 1. GET /members/all
  /members/all:
    get:
      tags:
        - members
      summary: 取得 全體 會員資料
      description: |
        當使用者發出 GET /members/all request 時 , 該 API 會回傳 **全體** 會員資料

        回傳資料格式 & 狀態碼 (status code)  如下
        
      responses:
        200:
          description: <h2>正常回傳資料</h2>
          content:
            application/json:
              examples:
                ok1:
                  summary: ok 
                  value:
                    '10001':
                      name: Jeff
                      gender: M
                      age: 18
                    '10002':
                      name: Leo
                      gender: M
                      age: 22
                    '10003':
                      name: Jenny
                      gender: F
                      age: 30
                    '10004':
                      name: Holy
                      gender: F
                      age: 31
                    '10005':
                      name: Gina
                      gender: F
                      age: 35
          
# 2. GET /members/detail/:memNo , ex: /members/10001
# 4. PUT /members/detail/:memNo (修改) 
  /members/detail/{memNo}:
    get:
      tags:
        - members
      summary: 取得 編號為 {memNo} 的會員資料
      description: | 
        當使用者發出 GET /members/detail/{memNo} request 時 , 該 API 會回傳 **{memNo}** 所對應之會員資料
      
        需調整 status_code 做不同情況的回覆
        <h3>
        - 200 -> 正常回傳資料
        - 404 -> 查無資料
        - 500 -> Server 端發生錯誤 , 正常情況是不會發生 , 可能是有預期之外的 bug 出現
        </h3>
        
        ---
        ex1: **GET /members/detail/10001 ( 正常更新狀況 #1 )**
        ```
        [response 200]:
          {
            "name": "Jeff",
            "gender": "M",
            "age": 18
          }
        ```
        
        ex2: **GET /members/detail/10005 ( 正常更新狀況 #2 )**
        ```
        [response 200]:
          {
            "name": "Gina",
            "gender": "F",
            "age": 35
          }
        ```
        
        ex3: **GET /members/detail/12345 ( 查無資料之狀況 )**
        ```
        [response 404]:
          { 
            "message" : "Not Found" 
          }
        ```
        
        ex4: **GET /members/detail/10005 ( Server 端程式有誤 )**
        ```
        [response 500]:
          { 
            "message" : "Server 端發生錯誤！"
          }
        ```
        
      parameters:
        - in: path
          name: memNo
          schema:
            type: string
          required: true
          description: 字串型數字
          example: 10001
          
      responses:
        200:
          description: <h2>正常回傳資料</h2>
          content:
            application/json:
              examples:
                ok1:
                  summary: ok (以 memNo=10001 為例)
                  value:
                    name: Jeff
                    gender: M
                    age: 18
                ok2:
                  summary: ok (以 memNo=10005 為例)
                  value:
                    name: Gina
                    gender: F
                    age: 35
                    
        404:
          description: <h2>查無資料</h2>
          content:
            application/json:
              examples:
                failed:
                  summary: failed (以 memNo=12345 為例)
                  value:
                    message: Not Found
        500:
          $ref: "#/components/responses/500ServerError" 
    put:
      tags:
        - members
      summary: 更新 編號為 {memNo} 的會員資料
      description: | 
        當使用者發出 PUT /members/detail/{memNo} request 時 , 該 API 會更新 **{memNo}** 所對應之會員資料
       
        
        需調整 status_code 做不同情況的回覆
        <h3>
        - 200 -> 更新資料ok 且 回傳 { 
            "message"      : "ok" , 
            "affectedRows" : 1 
          }
        - 400 -> 當傳過去的 req.body 沒有 name or gender or age 時，回傳錯誤 400
        - 404 -> 查無資料 , 僅回傳  { 
            "message"      : "Not Found" , 
            "affectedRows" : 0
          } 即可
        - 500 -> Server 端發生錯誤
        </h3>
        
        <h3>【註】：</h3>
         
        <h3>
        1. 本組 API 需特別檢查 req.body 是否有帶齊 name , gender , age 三個欄位的資料
        
           有缺失 -> 回傳 400 之錯誤 response
        2. 更新完後 , 可嘗試發  GET /members/all  檢查資料是否有 修改 資料成功 !
        </h3>
        ---
        ex1: **PUT /members/detail/10001  ( 正常更新狀況 #1 )** 
        ```
        [payload]:
          {
            "name": "傑夫老師",
            "gender": "M",
            "age": 18
          }
          
        [response 200]:
          { 
            "message"      : "ok" , 
            "affectedRows" : 1 
          }
        ```
        
        ex2: **PUT /members/detail/10004  ( 正常更新狀況 #2 )**
        ```
        [payload]:
          {
            "name": "多拉Ａ夢",
            "gender": "F",
            "age": 100
          }
          
        [response 200]:
          { 
            "message"      : "ok" , 
            "affectedRows" : 1 
          }
        ```
        
        ex3: **PUT /members/detail/12345  ( req.body 有誤之狀況 )**
        ```
        [payload]:
          {
            "name": "測試人",
            "gender": "F"
          }
          
        [response 400]:
          { 
            "message": "req.body 的資料格式有誤！"
          }
        ```
        
        ex4: **PUT /members/detail/12345  ( 查無資料之狀況 )**
        ```
        [payload]:
          {
            "name": "測試人",
            "gender": "F",
            "age": 20
          }
          
        [response 404]:
          { 
            "message"      : "Not Found" , 
            "affectedRows" : 0
          }
        ```
        
      parameters:
        - in: path
          name: memNo
          schema:
            type: string
          required: true
          description: 字串型數字
          example: 10001
       
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:         
                  type: string
                  description: 姓名
                  example: "Jeff"
                gender:         
                  type: string
                  description: 性別
                  example: "M"
                age:         
                  type: number
                  description: 年紀
                  example: 18
                
            
      responses:
        200:
          description: <h2>正常更新資料</h2>
          content:
            application/json:
              examples:
                ok1:
                  summary: ok (成功更新資料)
                  value:
                    message: ok
                    affectedRows: 1
       
        400:
          $ref: "#/components/responses/400BadPayload" 
        404:
          $ref: "#/components/responses/404NotFound" 
        500:
          $ref: "#/components/responses/500ServerError" 
 
# 3. POST   /members 
# 5. DELETE /members?memNo={user_memNo}
  /members:
    post:
      tags:
        - members
      summary: 新增 會員資料
      description: | 
        當使用者發出 POST /members request 時 , 該 API 新增一組會員資料
        
        其中 memNo 需由 server 端統一編製 , 
        以 **memNo 最大的數字+1** , 作為新資料的 memNo
        
        ex1:
        
        檢查資料 , 若目前最大的 **memNo=10005**, 則新資料為 **memNo=10006**
        
        ex2:
        
        檢查資料 , 若目前資料有 "10001","10002","10007","10009" 四組資料
        
        最大的 **memNo=10009**, 則新資料為 **memNo=10010**
        
        ---
        
        
        需調整 status_code 做不同情況的回覆
        <h3>
        - 200 -> 新增資料 ok, 回傳之 response 需攜帶新的 memNo
        - 400 -> 當傳過去的 req.body 沒有 name or gender or age 時，回傳錯誤 400
        - 500 -> Server 端發生錯誤
        </h3>
        
        <h3>【註】：</h3>
         
        <h3>
        1. 本組 API 需特別檢查 req.body 是否有帶齊 name , gender , age 三個欄位的資料
        
           有缺失 -> 回傳 400 之錯誤 response
        2. 新增完後 , 可嘗試發  GET /members/all  檢查資料是否有 新增 資料成功 !
        </h3>
        ---
        ex1: **POST /members  ( 正常更新狀況 #1 )** 
        ```
        [payload]:
          {
            "name": "阿夫老師",
            "gender": "M",
            "age": 38
          }
          
        [response 200]:
          { 
            "message" : "ok",
            "memNo"   : "10012"
          }
        ```
        
        ex2: **POST /members  ( 正常更新狀況 #2 )**
        ```
        [payload]:
          {
            "name": "QQ助教",
            "gender": "F",
            "age": 31
          }
          
        [response 200]:
          { 
            "message" : "ok",
            "memNo"   : "10013"
          }
        ``` 
        
        ex3: **POST /members  ( req.body 有誤之狀況 )**
        ```
        [payload]:
          {
            "name": "測試人",
            "gender": "F"
          }
          
        [response 400]:
          { 
            "message": "req.body 的資料格式有誤！"
          }
        ```
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:         
                  type: string
                  description: 姓名
                  example: "Jeff"
                gender:         
                  type: string
                  description: 性別
                  example: "M"
                age:         
                  type: number
                  description: 年紀
                  example: 18
                
            
      responses:
        200:
          description: <h2>正常新增資料</h2>
          content:
            application/json:
              examples:
                ok1:
                  summary: ok (成功新增資料)
                  value:
                    message: ok
                    memNo: '10012'
       
        400:
          $ref: "#/components/responses/400BadPayload" 
        500:
          $ref: "#/components/responses/500ServerError" 
          
    delete:
      tags:
        - members
      summary: 刪除 特定的會員資料
      description: | 
        當使用者發出 DELETE /members?memNo={memNo} request 時 , 該 API 會刪除 **{memNo}** 所對應之會員資料
        
        
        需調整 status_code 做不同情況的回覆
        <h3>
        - 200 -> 刪除資料 且 回傳 { 
            "message"      : "ok" , 
            "affectedRows" : 1 
          }
        - 404 -> 查無資料 , 回傳  { 
            "message"      : "Not Found" , 
            "affectedRows" : 0
          } 即可
        - 500 -> Server 端發生錯誤
        </h3>
        
        <h3>【註】：</h3>
         
        <h3>
        1. 本組 API , 使用 query_string 的方式攜帶 memNo 參數
        2. 刪除完後 , 可嘗試發  GET /members/all  檢查資料是否有 刪除 資料成功 !
        </h3>
        ---
        ex1: **DELETE /members?memNo=10001  ( 正常刪除狀況 #1 )** 
        ```
        [response 200]:
          { 
            "message" : "ok",
            "affectedRows" : 1 
          }
        ```
        
        ex2: **DELETE /members?memNo=10005  ( 正常更新狀況 #2 )**
        ```
        [response 200]:
          { 
            "message" : "ok",
            "affectedRows" : 1 
          }
        ```
        
        ex3: **POST /members?memNo=33333  ( 查無資料 )**
        ```
        [response 404]:
          { 
            "message" : "Not Found", 
            "affectedRows" : 0
          }
        ```
        
      parameters:
        - in: query
          name: memNo
          schema:
            type: string
          required: true
          description: 字串型數字
          example: 10001
                
      responses:
        200:
          description: <h2>正常刪除資料</h2>
          content:
            application/json:
              examples:
                ok1:
                  summary: ok (成功刪除資料)
                  value:
                    message: ok
                    affectedRows: 1
                    
        404:
          $ref: "#/components/responses/404NotFound" 
        500:
          $ref: "#/components/responses/500ServerError" 
  

components:
  responses:
    200MessageOk:
      description: successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "ok"
                
    400BadPayload:
      description: <h2>req.body 的資料格式有誤</h2>
      content:
        application/json:
          examples:
            failed:
              summary: failed 
              value:
                message: req.body 的資料格式有誤！
           
    404NotFound:
      description: <h2>查無資料</h2>
      content:
        application/json:
          examples:
            failed:
              summary: failed 
              value:
                message: Not Found
                affectedRows: 0
                
    500ServerError:
      description: <h2>Server 端發生錯誤</h2>
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Server 端發生錯誤！"
   
        
    
  